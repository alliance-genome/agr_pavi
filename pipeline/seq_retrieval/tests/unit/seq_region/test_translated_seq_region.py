"""
Unit testing for TranslatedSeqRegion class and related functions
"""

from Bio.Data import CodonTable

from seq_region import SeqRegion, TranslatedSeqRegion
from seq_region.translated_seq_region import find_orfs

import pytest

from typing import List, TypedDict


FASTA_FILE_URL = 'file://tests/resources/GCF_000002985.6_WBcel235_genomic_X.fna.gz'


class TranscriptFixture(TypedDict):
    """
    Type representing transcript fixtures used in below unit testing
     * 'start' property indicates the region start (1-based, inclusive)
     * 'end' property indicates the region end (1-based, inclusive)
     * Optional 'frame' property indicates the framing of the region for translation (0-based, 0..2, default 0)
    """
    translatedSeqRegion: TranslatedSeqRegion
    transcriptSeq: str
    proteinSeq: str


@pytest.fixture
def WB_transcript1() -> TranscriptFixture:
    # WBGene00000149 Transcript:C54H2.5.1
    # Exon 1 (mRNA start)
    exon_1: SeqRegion = SeqRegion(seq_id='X', start=5780644, end=5780722, strand='-',
                                  fasta_file_url=FASTA_FILE_URL)

    # Exon 2
    exon_2: SeqRegion = SeqRegion(seq_id='X', start=5780278, end=5780585, strand='-',
                                  fasta_file_url=FASTA_FILE_URL)

    # Exon 3
    exon_3: SeqRegion = SeqRegion(seq_id='X', start=5779920, end=5780231, strand='-',
                                  fasta_file_url=FASTA_FILE_URL)

    # Exon 4
    exon_4: SeqRegion = SeqRegion(seq_id='X', start=5778875, end=5779453, strand='-',
                                  fasta_file_url=FASTA_FILE_URL)

    seq_region_list = [exon_1, exon_2, exon_3, exon_4]

    TRANSCRIPT_SEQ = ''.join('''
        CTCTTGGAAAATGAACCAGTTCCGGGCTCCAGGTGGTCAGAACGAAATGCTGGCGAAAGCAGAAGACGCCGCTGAAGAT
        TTCTTCCGCAAAACAAGGACCTACCTACCCCACATTGCTCGCCTCTGCCTCGTCTCCACATTCCTTGAAGATGGAATCC
        GTATGTACTTCCAATGGGATGATCAAAAACAGTTCATGCAAGAGTCTTGGTCTTGCGGTTGGTTCATCGCAACTTTGTT
        CGTCATCTACAACTTCTTCGGACAGTTCATCCCGGTTTTAATGATCATGCTCCGCAAGAAGGTGTTGGTCGCATGTGGA
        ATTCTTGCCAGCATTGTCATTCTCCAAACCATCGCTTACCATATTCTCTGGGACTTGAAGTTCTTGGCCAGaaacattg
        CCGTTGGTGGAGGACTTTTGCTCCTTCTTGCCGAGACACAGGAAGAGAAGGCTTCCCTGTTCGCCGGAGTTCCAACAAT
        GGGAGACTCGAACAAGCCAAAATCGTACATGCTTCTTGCCGGACGTGTTCTTCTTATCTTCATGTTCATGTCTTTGATG
        CATTTTGAGATGTCCTTCATGCAAGTTTTGGAGATTGTTGTTGGATTTGCTCTCATCACTCTCGTCTCAATTGGTTACA
        AGACAAAGCTTTCCGCGATTGTTCTTGTCATCTGGCTCTTCGGACTTAACCTTTGGCTTAATGCTTGgtggACCATTCC
        TTCCGACCGCTTCTACAGAGACTTCATGAAGTACGATTTCTTCCAAACCATGTCCGTCATTGGAGGACTTCTCCTTGTC
        ATTGCCTACGGACCAGGAGGAGTGTCAGTCGATGACTACAAGAAAAGATGGTAGATACCCCATTAACACCAGTACTTAT
        ACGCATTTCTATGTCAAATCATTGCATTACACTCACTCACCCCGATAAATTTACCTGGATTGTTTATATAATTTATGAA
        tctgtttcgattttttcgatatttcctTTAATCAATATATTTAGAGTAGAACGTTTTCCCTCGGTTTCCCATCCAATGC
        TTCTTGTCGTAATGTTACAACTTCATATCTatttccttttatttttttttgtcattttcttcCTTTCCCTAAAACTTCA
        TGGACTATATGGGTTGTTTTCCAATGAAACTCTCCCTACAAACTTCTATTTTTCTCACACGAATCACAACTAAAACAGT
        CATTTTTCCACCACTTTCCTTTACTTTCTAATCGGCCTATCCCAATTTTCTTCTGGTAGTTTTGTTCCCGTAaagaata
        aacatttttctgtc'''.split())

    PROTEIN_SEQ = ''.join('''
        MNQFRAPGGQNEMLAKAEDAAEDFFRKTRTYLPHIARLCLVSTFLEDGIRMYFQWDDQKQFMQESWSCGWFIATLFVI
        YNFFGQFIPVLMIMLRKKVLVACGILASIVILQTIAYHILWDLKFLARNIAVGGGLLLLLAETQEEKASLFAGVPTMGD
        SNKPKSYMLLAGRVLLIFMFMSLMHFEMSFMQVLEIVVGFALITLVSIGYKTKLSAIVLVIWLFGLNLWLNAWWTIPSD
        RFYRDFMKYDFFQTMSVIGGLLLVIAYGPGGVSVDDYKKRW'''.split())

    return {
        'translatedSeqRegion': TranslatedSeqRegion(exon_seq_regions=seq_region_list),
        'transcriptSeq': TRANSCRIPT_SEQ,
        'proteinSeq': PROTEIN_SEQ
    }


@pytest.fixture
def WB_transcript2_exons() -> List[SeqRegion]:
    # WBGene00003232 Transcript:ZC506.4a.1
    return [
        SeqRegion(seq_id='X', start=9975783, end=9976017, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9973922, end=9974005, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9973799, end=9973834, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9973090, end=9973196, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9972951, end=9973032, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9972797, end=9972906, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9972486, end=9972674, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9972331, end=9972440, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9972101, end=9972215, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9971651, end=9972022, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9971183, end=9971279, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9970990, end=9971137, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9970778, end=9970941, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9970619, end=9970720, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9970339, end=9970577, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9969791, end=9970049, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9969676, end=9969748, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9969386, end=9969633, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9969191, end=9969336, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9968517, end=9968788, strand='-', fasta_file_url=FASTA_FILE_URL),
    ]


@pytest.fixture
def WB_transcript2_CDSs() -> List[SeqRegion]:
    # WBGene00003232 Transcript:ZC506.4a.1
    return [
        SeqRegion(seq_id='X', start=9975783, end=9975791, frame=0, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9973922, end=9974005, frame=0, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9973799, end=9973834, frame=0, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9973090, end=9973196, frame=0, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9972951, end=9973032, frame=1, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9972797, end=9972906, frame=0, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9972486, end=9972674, frame=1, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9972331, end=9972440, frame=1, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9972101, end=9972215, frame=2, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9971651, end=9972022, frame=1, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9971183, end=9971279, frame=1, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9970990, end=9971137, frame=0, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9970778, end=9970941, frame=2, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9970619, end=9970720, frame=0, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9970339, end=9970577, frame=0, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9969791, end=9970049, frame=1, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9969676, end=9969748, frame=0, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9969386, end=9969633, frame=2, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9969191, end=9969336, frame=0, strand='-', fasta_file_url=FASTA_FILE_URL),
        SeqRegion(seq_id='X', start=9968629, end=9968788, frame=1, strand='-', fasta_file_url=FASTA_FILE_URL),
    ]


@pytest.fixture
def WB_transcript2_no_cds(WB_transcript2_exons: List[SeqRegion]) -> TranscriptFixture:
    # WBGene00003232 Transcript:ZC506.4a.1
    TRANSCRIPT_SEQ = ''.join('''
        aaacgacacatatgaatgtatatagggaacaagagtttccatactcatagtgctcattagaatagcacggatcgtgtttc
        gcctctcgccttgttaaccgaatctgcccccgtgtgccccggctgcttgtgttgtgtcacacaagactaacgccctctta
        tcctttccattctcttaaaatccatttctagagttgaaaactttatttttattcaatactcaaatcATGGTACCGAAACC
        CCCTTCAATAATTCGACACATGTTCTCGGTGCTTGCACTTGCTATACAGATACTTGCAAATGTCAATGTGGTTGCACAGA
        CAACGGAAGCCGTCGACCTCGCTCCACCTCCAAAAGTTCGACAAATCCGAATACCCGGAGATATATTAATCGGTGGCGTC
        TTTCCAGTTCATTCAAAGTCATTAAACGGCGATGAGCCATGTGGCGAAATAGCCGAAACCAGGGGTGTGCATCGAGTGGA
        AGCAATGCTCTATGCGCTCGACCAGATTAACTCTCAAAACGACTTTCTTCGCGGGTACAAATTGGGTGCACTTATTCTTG
        ATTCATGCTCAAATCCAGCATATGCGCTAAACCAGAGTTTAGATTTTGTGAGAGATATGATTGGATCCTCAGAAGCTTCT
        GATTATGTTTGTCTGGATGGGAGCGATCCAAATCTCAAGAAACAATCACAAAAGAAGAATGTAGCAGCAGTAGTAGGTGG
        TAGTTATAGTTCTGTGTCTGTACAATTAGCAAACCTATTGCGACTGTTTCGAATAGCACAAGTTAGCCCTGCAAGTACTA
        ATGCAGACTTGTCGGATAAAAACCGATTTGAATATTTTGCAAGAACAGTACCTTCTGATGATTATCAGGCTATGGCAATG
        GTCGAAATCGCTGTTAAATTCAAATGGAGTTATGTTTCCCTTGTTTACTCGGCAGATGAATACGGAGAATTGGGTGCTGA
        CGCTTTCAAAAAAGAAGCAAGAAAGAAAGGAATCTGCATCGCACTAGAAGAACGAATACAAAATAAAAAAGAAAGTTTCA
        CGGAGTCAATCAACAATTTGGTTCAAAAACTTCAACCCGAGAAAAATGTTGGAGCAACGGTGGTGGTTCTGTTTGTAGGA
        ACAGAATACATCCCAGACATATTGCGATACACGGCAGAAAGGATGAAGTTGACGTCCGGCGCAAAGAAGCGTATCATTTG
        GCTTGCATCAGAGTCGTGGGATAGAAACAATGACAAGTATACCGCAGGAGACAATCGGCTAGCAGCTCAAGGAGCTATAG
        TTTTGATGTTGGCATCACAGAAAGTTCCGTCATTTGAAGAGTATTTTATGAGTTTGCATCCTGGTACAGAAGCGTTCGAA
        AGAAATAAATGGTTAAGGGAGTTGTGGCAAGTAAAGTACAAATGTGAATTTGATACTCCGCCTGGGTCAACGGCATCAAG
        GTGCGAGGATATCAAACAATCCACCGAAGGCTTCAATGCAGATGACAAGGTTCAATTTGTAATTGATGCAGTCTATGCCA
        TTGCTCATGGGCTCCAATCTATGAAACAAGCGATATGTCCAGATGATGCTATCGAAAATCACTGGATTTCTCGGTACAGC
        AAGCAACCTGAAATATGCCACGCCATGCAAAACATTGATGGAAGTGACTTTTATCAAAATTATTTGCTCAAAGTTAACTT
        TACAGATATTGTTGGAAAAAGGTTTCGTTTTTCACCACAAGGAGATGGTCCAGCTAGTTACACAATTTTGACATATAAGC
        CAAAATCCATGGATAAAAAGCGGAGGATGACAGATGACGAGAGCTCGCCATCTGATTATGTAGAAATTGGACACTGGAGT
        GAGAACAACTTGACCATTTATGAGAAAAACTTATGGTGGGATCCTGATCATACACCAGTCTCCGTTTGTTCTTTGCCCTG
        TAAAATCGGGTTCAGAAAACAGTTGATAAAGGATGAACAATGTTGTTGGGCATGCAGCAAATGTGAAGACTACGAATATC
        TCATCAATGAAACTCATTGTGTAGGGTGTGAACAGGGATGGTGGCCAACAAAGGATAGGAAAGGATGTTTTGATCTATCT
        CTTTCCCAGTTAAAATATATGAGATGGAGGTCGATGTACTCGTTGGTTCCAACCATTTTAGCAGTGTTTGGAATTATTGC
        CACACTCTTTGTGATAGTGGTGTATGTGATATATAATGAAACCCCTGTCGTTAAAGCTTCGGGGCGAGAGCTAAGCTACA
        TTTTGCTTATTTCCATGATTATGTGTTACTGCATGACATTTGTTCTTCTATCAAAACCAAGTGCAATTGTATGTGCTATC
        AAACGAACAGGAATTGGATTCGCATTTTCTTGTCTATACTCTGCAATGTTTGTAAAAACCAATAGAATTTTCCGCATCTT
        CAGCACAAGATCTGCTCAACGACCAAGATTCATATCTCCCATCTCTCAGGTTGTCATGACTGCAATGCTAGCCGGAGTAC
        AATTGATCGGAAGTCTTATTTGGCTGTCAGTAGTGCCACCAGGTTGGAGACACCACTACCCCACCAGGGACCAGGTGGTT
        TTAACTTGTAATGTTCCTGACCATCACTTTTTGTATTCATTGGCTTATGATGGTTTCCTGATTGTGCTTTGTACAACGTA
        TGCTGTAAAAACTAGAAAAGTGCCCGAAAATTTCAACGAGACAAAATTCATCGGCTTCTCCATGTACACGACATGTGTTG
        TTTGGCTCAGTTGGATTTTCTTTTTTTTTGGAACCGGAAGTGATTTCCAAATTCAAACATCATCTCTTTGTATTTCAATT
        TCCATGTCAGCCAATGTGGCATTAGCATGCATATTTTCACCAAAGCTTTGGATCATTTTGTTTGAAAAACACAAAAACGT
        CCGAAAGCAGGAAGGTGAAAGTATGCTTAACAAAAGTAGCAGATCATTAGGAAACTGTAGTTCCCGATTATGTGCCAATA
        GCATCGACGAGCCAAATCAGTACACCGCTTTGCTCACTGACAGTACACGAAGACGATCATCACGCAAGACATCTCAGCCA
        ACGAGCACCAGCTCTGCTCACGATACTTTCTTATGAatgatatccattaatttattgtgcatatgtatcaatatacctga
        taacgaaaattgtttatcgataattctttcttttgatacggaatgaatgaactattcggacgaacacg'''.split())

    PROTEIN_SEQ = ''.join('''
        LKTLFLFNTQIMVPKPPSIIRHMFSVLALAIQILANVNVVAQTTEAVDLA
        PPPKVRQIRIPGDILIGGVFPVHSKSLNGDEPCGEIAETRGVHRVEAMLY
        ALDQINSQNDFLRGYKLGALILDSCSNPAYALNQSLDFVRDMIGSSEASD
        YVCLDGSDPNLKKQSQKKNVAAVVGGSYSSVSVQLANLLRLFRIAQVSPA
        STNADLSDKNRFEYFARTVPSDDYQAMAMVEIAVKFKWSYVSLVYSADEY
        GELGADAFKKEARKKGICIALEERIQNKKESFTESINNLVQKLQPEKNVG
        ATVVVLFVGTEYIPDILRYTAERMKLTSGAKKRIIWLASESWDRNNDKYT
        AGDNRLAAQGAIVLMLASQKVPSFEEYFMSLHPGTEAFERNKWLRELWQV
        KYKCEFDTPPGSTASRCEDIKQSTEGFNADDKVQFVIDAVYAIAHGLQSM
        KQAICPDDAIENHWISRYSKQPEICHAMQNIDGSDFYQNYLLKVNFTDIV
        GKRFRFSPQGDGPASYTILTYKPKSMDKKRRMTDDESSPSDYVEIGHWSE
        NNLTIYEKNLWWDPDHTPVSVCSLPCKIGFRKQLIKDEQCCWACSKCEDY
        EYLINETHCVGCEQGWWPTKDRKGCFDLSLSQLKYMRWRSMYSLVPTILA
        VFGIIATLFVIVVYVIYNETPVVKASGRELSYILLISMIMCYCMTFVLLS
        KPSAIVCAIKRTGIGFAFSCLYSAMFVKTNRIFRIFSTRSAQRPRFISPI
        SQVVMTAMLAGVQLIGSLIWLSVVPPGWRHHYPTRDQVVLTCNVPDHHFL
        YSLAYDGFLIVLCTTYAVKTRKVPENFNETKFIGFSMYTTCVVWLSWIFF
        FFGTGSDFQIQTSSLCISISMSANVALACIFSPKLWIILFEKHKNVRKQE
        GESMLNKSSRSLGNCSSRLCANSIDEPNQYTALLTDSTRRRSSRKTSQPT
        STSSAHDTFL'''.split())

    return {
        'translatedSeqRegion': TranslatedSeqRegion(exon_seq_regions=WB_transcript2_exons),
        'transcriptSeq': TRANSCRIPT_SEQ,
        'proteinSeq': PROTEIN_SEQ
    }


@pytest.fixture
def WB_transcript2_with_cds(WB_transcript2_exons: List[SeqRegion], WB_transcript2_CDSs: List[SeqRegion]) -> TranscriptFixture:
    # WBGene00003232 Transcript:ZC506.4a.1
    TRANSCRIPT_SEQ = ''.join('''
        aaacgacacatatgaatgtatatagggaacaagagtttccatactcatagtgctcattagaatagcacggatcgtgtttc
        gcctctcgccttgttaaccgaatctgcccccgtgtgccccggctgcttgtgttgtgtcacacaagactaacgccctctta
        tcctttccattctcttaaaatccatttctagagttgaaaactttatttttattcaatactcaaatcATGGTACCGAAACC
        CCCTTCAATAATTCGACACATGTTCTCGGTGCTTGCACTTGCTATACAGATACTTGCAAATGTCAATGTGGTTGCACAGA
        CAACGGAAGCCGTCGACCTCGCTCCACCTCCAAAAGTTCGACAAATCCGAATACCCGGAGATATATTAATCGGTGGCGTC
        TTTCCAGTTCATTCAAAGTCATTAAACGGCGATGAGCCATGTGGCGAAATAGCCGAAACCAGGGGTGTGCATCGAGTGGA
        AGCAATGCTCTATGCGCTCGACCAGATTAACTCTCAAAACGACTTTCTTCGCGGGTACAAATTGGGTGCACTTATTCTTG
        ATTCATGCTCAAATCCAGCATATGCGCTAAACCAGAGTTTAGATTTTGTGAGAGATATGATTGGATCCTCAGAAGCTTCT
        GATTATGTTTGTCTGGATGGGAGCGATCCAAATCTCAAGAAACAATCACAAAAGAAGAATGTAGCAGCAGTAGTAGGTGG
        TAGTTATAGTTCTGTGTCTGTACAATTAGCAAACCTATTGCGACTGTTTCGAATAGCACAAGTTAGCCCTGCAAGTACTA
        ATGCAGACTTGTCGGATAAAAACCGATTTGAATATTTTGCAAGAACAGTACCTTCTGATGATTATCAGGCTATGGCAATG
        GTCGAAATCGCTGTTAAATTCAAATGGAGTTATGTTTCCCTTGTTTACTCGGCAGATGAATACGGAGAATTGGGTGCTGA
        CGCTTTCAAAAAAGAAGCAAGAAAGAAAGGAATCTGCATCGCACTAGAAGAACGAATACAAAATAAAAAAGAAAGTTTCA
        CGGAGTCAATCAACAATTTGGTTCAAAAACTTCAACCCGAGAAAAATGTTGGAGCAACGGTGGTGGTTCTGTTTGTAGGA
        ACAGAATACATCCCAGACATATTGCGATACACGGCAGAAAGGATGAAGTTGACGTCCGGCGCAAAGAAGCGTATCATTTG
        GCTTGCATCAGAGTCGTGGGATAGAAACAATGACAAGTATACCGCAGGAGACAATCGGCTAGCAGCTCAAGGAGCTATAG
        TTTTGATGTTGGCATCACAGAAAGTTCCGTCATTTGAAGAGTATTTTATGAGTTTGCATCCTGGTACAGAAGCGTTCGAA
        AGAAATAAATGGTTAAGGGAGTTGTGGCAAGTAAAGTACAAATGTGAATTTGATACTCCGCCTGGGTCAACGGCATCAAG
        GTGCGAGGATATCAAACAATCCACCGAAGGCTTCAATGCAGATGACAAGGTTCAATTTGTAATTGATGCAGTCTATGCCA
        TTGCTCATGGGCTCCAATCTATGAAACAAGCGATATGTCCAGATGATGCTATCGAAAATCACTGGATTTCTCGGTACAGC
        AAGCAACCTGAAATATGCCACGCCATGCAAAACATTGATGGAAGTGACTTTTATCAAAATTATTTGCTCAAAGTTAACTT
        TACAGATATTGTTGGAAAAAGGTTTCGTTTTTCACCACAAGGAGATGGTCCAGCTAGTTACACAATTTTGACATATAAGC
        CAAAATCCATGGATAAAAAGCGGAGGATGACAGATGACGAGAGCTCGCCATCTGATTATGTAGAAATTGGACACTGGAGT
        GAGAACAACTTGACCATTTATGAGAAAAACTTATGGTGGGATCCTGATCATACACCAGTCTCCGTTTGTTCTTTGCCCTG
        TAAAATCGGGTTCAGAAAACAGTTGATAAAGGATGAACAATGTTGTTGGGCATGCAGCAAATGTGAAGACTACGAATATC
        TCATCAATGAAACTCATTGTGTAGGGTGTGAACAGGGATGGTGGCCAACAAAGGATAGGAAAGGATGTTTTGATCTATCT
        CTTTCCCAGTTAAAATATATGAGATGGAGGTCGATGTACTCGTTGGTTCCAACCATTTTAGCAGTGTTTGGAATTATTGC
        CACACTCTTTGTGATAGTGGTGTATGTGATATATAATGAAACCCCTGTCGTTAAAGCTTCGGGGCGAGAGCTAAGCTACA
        TTTTGCTTATTTCCATGATTATGTGTTACTGCATGACATTTGTTCTTCTATCAAAACCAAGTGCAATTGTATGTGCTATC
        AAACGAACAGGAATTGGATTCGCATTTTCTTGTCTATACTCTGCAATGTTTGTAAAAACCAATAGAATTTTCCGCATCTT
        CAGCACAAGATCTGCTCAACGACCAAGATTCATATCTCCCATCTCTCAGGTTGTCATGACTGCAATGCTAGCCGGAGTAC
        AATTGATCGGAAGTCTTATTTGGCTGTCAGTAGTGCCACCAGGTTGGAGACACCACTACCCCACCAGGGACCAGGTGGTT
        TTAACTTGTAATGTTCCTGACCATCACTTTTTGTATTCATTGGCTTATGATGGTTTCCTGATTGTGCTTTGTACAACGTA
        TGCTGTAAAAACTAGAAAAGTGCCCGAAAATTTCAACGAGACAAAATTCATCGGCTTCTCCATGTACACGACATGTGTTG
        TTTGGCTCAGTTGGATTTTCTTTTTTTTTGGAACCGGAAGTGATTTCCAAATTCAAACATCATCTCTTTGTATTTCAATT
        TCCATGTCAGCCAATGTGGCATTAGCATGCATATTTTCACCAAAGCTTTGGATCATTTTGTTTGAAAAACACAAAAACGT
        CCGAAAGCAGGAAGGTGAAAGTATGCTTAACAAAAGTAGCAGATCATTAGGAAACTGTAGTTCCCGATTATGTGCCAATA
        GCATCGACGAGCCAAATCAGTACACCGCTTTGCTCACTGACAGTACACGAAGACGATCATCACGCAAGACATCTCAGCCA
        ACGAGCACCAGCTCTGCTCACGATACTTTCTTATGAatgatatccattaatttattgtgcatatgtatcaatatacctga
        taacgaaaattgtttatcgataattctttcttttgatacggaatgaatgaactattcggacgaacacg'''.split())

    PROTEIN_SEQ = ''.join('''
        MVPKPPSIIRHMFSVLALAIQILANVNVVAQTTEAVDLAPPPKVRQIRIPGDILIGGVFPVHSKSLNGDEPCGEIAETRG
        VHRVEAMLYALDQINSQNDFLRGYKLGALILDSCSNPAYALNQSLDFVRDMIGSSEASDYVCLDGSDPNLKKQSQKKNVA
        AVVGGSYSSVSVQLANLLRLFRIAQVSPASTNADLSDKNRFEYFARTVPSDDYQAMAMVEIAVKFKWSYVSLVYSADEYG
        ELGADAFKKEARKKGICIALEERIQNKKESFTESINNLVQKLQPEKNVGATVVVLFVGTEYIPDILRYTAERMKLTSGAK
        KRIIWLASESWDRNNDKYTAGDNRLAAQGAIVLMLASQKVPSFEEYFMSLHPGTEAFERNKWLRELWQVKYKCEFDTPPG
        STASRCEDIKQSTEGFNADDKVQFVIDAVYAIAHGLQSMKQAICPDDAIENHWISRYSKQPEICHAMQNIDGSDFYQNYL
        LKVNFTDIVGKRFRFSPQGDGPASYTILTYKPKSMDKKRRMTDDESSPSDYVEIGHWSENNLTIYEKNLWWDPDHTPVSV
        CSLPCKIGFRKQLIKDEQCCWACSKCEDYEYLINETHCVGCEQGWWPTKDRKGCFDLSLSQLKYMRWRSMYSLVPTILAV
        FGIIATLFVIVVYVIYNETPVVKASGRELSYILLISMIMCYCMTFVLLSKPSAIVCAIKRTGIGFAFSCLYSAMFVKTNR
        IFRIFSTRSAQRPRFISPISQVVMTAMLAGVQLIGSLIWLSVVPPGWRHHYPTRDQVVLTCNVPDHHFLYSLAYDGFLIV
        LCTTYAVKTRKVPENFNETKFIGFSMYTTCVVWLSWIFFFFGTGSDFQIQTSSLCISISMSANVALACIFSPKLWIILFE
        KHKNVRKQEGESMLNKSSRSLGNCSSRLCANSIDEPNQYTALLTDSTRRRSSRKTSQPTSTSSAHDTFL'''.split())

    return {
        'translatedSeqRegion': TranslatedSeqRegion(exon_seq_regions=WB_transcript2_exons, cds_seq_regions=WB_transcript2_CDSs),
        'transcriptSeq': TRANSCRIPT_SEQ,
        'proteinSeq': PROTEIN_SEQ
    }


def test_translated_seq_region_class(WB_transcript1: TranscriptFixture) -> None:

    translatedSeqRegion = WB_transcript1['translatedSeqRegion']

    ## Fetch transcript sequence
    translatedSeqRegion.fetch_seq(type='transcript', recursive_fetch=True)

    # Assert successful transcript seq retrieval
    assert translatedSeqRegion.get_sequence(type='transcript') == WB_transcript1['transcriptSeq']

    ## Test translate method
    protein_seq = translatedSeqRegion.translate()

    # Assert successful translation
    assert isinstance(protein_seq, str)
    assert protein_seq == WB_transcript1['proteinSeq']


def test_incomplete_orf_translation() -> None:

    # Test translation of incomplete ORF
    # WBGene00000149 Transcript:C54H2.5.1 5' UTR
    five_p_utr: SeqRegion = SeqRegion(seq_id='X', start=5780713, end=5780722, strand='-',
                                      fasta_file_url=FASTA_FILE_URL)
    UTR_SEQ = 'CTCTTGGAAA'

    five_p_utr.fetch_seq()

    incomplete_multipart_seq_region = TranslatedSeqRegion(exon_seq_regions=[five_p_utr])

    incomplete_multipart_seq_region.fetch_seq(type='transcript')

    chained_utr_seq: str = incomplete_multipart_seq_region.get_sequence(type='transcript')

    assert isinstance(chained_utr_seq, str)
    assert chained_utr_seq == UTR_SEQ

    incomplete_translation = incomplete_multipart_seq_region.translate()

    # Assert failed translation
    assert incomplete_translation is None


def test_orf_detection() -> None:

    # Test detection of ORF in softmasked sequence
    # Y48G1C.9b cds
    DNA_SEQUENCE = 'ATGATCTCGAAAAAGCACGTGGAATCGATGCACGCGTTGCCGGACCCtaaagaaactgaaatttga'

    codon_table: CodonTable.CodonTable = CodonTable.unambiguous_dna_by_name["Standard"]

    # Find the best open reading frame
    orfs = find_orfs(DNA_SEQUENCE, codon_table, return_type='longest')

    assert isinstance(orfs, list)
    assert len(orfs) == 1

    orf = orfs.pop()
    assert 'seq_start' in orf.keys() and 'seq_end' in orf.keys()

    assert orf['seq_start'] == 1
    assert orf['seq_end'] == 66


def test_cds_vs_non_cds_translation(WB_transcript2_no_cds: TranscriptFixture, WB_transcript2_with_cds: TranscriptFixture) -> None:

    no_CDS_translatedSeqRegion = WB_transcript2_no_cds['translatedSeqRegion']
    cds_translatedSeqRegion = WB_transcript2_with_cds['translatedSeqRegion']

    ## Fetch transcript sequences
    no_CDS_translatedSeqRegion.fetch_seq(type='transcript', recursive_fetch=True)
    cds_translatedSeqRegion.fetch_seq(type='transcript', recursive_fetch=True)

    ## Translate
    no_cds_protein_seq = no_CDS_translatedSeqRegion.translate()
    cds_protein_seq = cds_translatedSeqRegion.translate()

    # Assert successful translation
    assert isinstance(no_cds_protein_seq, str)
    assert isinstance(cds_protein_seq, str)

    # Assert proteins match expected result and not each other
    assert no_cds_protein_seq == WB_transcript2_no_cds['proteinSeq']
    assert cds_protein_seq == WB_transcript2_with_cds['proteinSeq']
    # If protein sequence with and without use of CDS is identical,
    # then this test case is pointless (and needs replacement)
    assert no_cds_protein_seq != cds_protein_seq
