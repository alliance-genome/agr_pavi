#!/usr/bin/env python3
"""
Main module serving the CLI for PAVI sequence info align component.

Collects and merges sequence info generated by the sequence retrieval component
 + adds relative alignment positions for all variants using alignment results.
"""
import click
import logging
import os
from typing import List

from log_mgmt import set_log_level, get_logger

logger = get_logger(name=__name__)


def process_sequence_info_files_param(ctx: click.Context, param: click.Parameter, value: str) -> List[str]:  # noqa: U100
    """
    Parse the value of click input parameter seq_info_files and validate its content.

    Value is expected to be a space-separated list of files containing json-formatted sequence info.

    Returns:
        List of string representing the files containing sequence info

    Raises:
        click.BadParameter: If value could not be parsed as space-separated list or the filepaths in it are invalid.
    """
    sequence_info_files = value.split(' ')

    # Validate each of the sequence info files exists and is a readable file
    for sequence_info_file in sequence_info_files:
        if not os.path.exists(sequence_info_file):
            raise click.BadParameter(f"Sequence info file '{sequence_info_file}' does not exist.")
        if not os.path.isfile(sequence_info_file):
            raise click.BadParameter(f"Sequence info file '{sequence_info_file}' is not a regular file.")
        if not os.access(sequence_info_file, os.R_OK):
            raise click.BadParameter(f"Sequence info file '{sequence_info_file}' is not readable.")

    return sequence_info_files


def process_alignment_result_file_param(ctx: click.Context, param: click.Parameter, value: str) -> str:  # noqa: U100
    """
    Parse the value of click input parameter alignment_result_file and validate its content.

    Value is expected to be a space-separated list of files containing json-formatted sequence info.

    Returns:
        List of string representing the files containing sequence info

    Raises:
        click.BadParameter: If the provided value is not a valid readable file path.
    """

    # Validate the alignment result file exists and is a readable file
    if not os.path.exists(value):
        raise click.BadParameter(f"Sequence info file '{value}' does not exist.")
    if not os.path.isfile(value):
        raise click.BadParameter(f"Sequence info file '{value}' is not a regular file.")
    if not os.access(value, os.R_OK):
        raise click.BadParameter(f"Sequence info file '{value}' is not readable.")

    return value


@click.command(context_settings={'show_default': True})
@click.option("--sequence_info_files", type=click.UNPROCESSED, required=True, callback=process_sequence_info_files_param,
              help="Space separated list of sequence info files to read.")
@click.option("--alignment-result-file", type=click.UNPROCESSED, required=True, callback=process_alignment_result_file_param,
              help="Path to alignment output file.")
@click.option("--debug", is_flag=True,
              help="""Flag to enable debug printing.""")
def main(alignment_result_file: str, sequence_info_files: List[str], debug: bool) -> None:
    if debug:
        set_log_level(logging.DEBUG)
    else:
        set_log_level(logging.INFO)

    logger.debug(f"sequence_info_files: {sequence_info_files}")
    logger.debug(f"alignment output file: {alignment_result_file}")

    # TODO: implement

    pass
