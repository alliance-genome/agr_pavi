"""
Unit testing for SeqInfo class and related functions
"""
import logging

from log_mgmt import get_logger, set_log_level
from seq_info import SeqInfo
from variant import AlignmentEmbeddedVariant, SeqEmbeddedVariant

logger = get_logger(name=__name__)
set_log_level(logging.DEBUG)


def test_seq_info_initiation_all_attributes(wb_variants_yn10_yn30_in_C42D8_8a_1_list):
    '''
    Test that the SeqInfo class initiates correctly when given all attributes
    '''
    SEQ = 'atgACGGTGGGTAAACTAATGATTGGCTTACTTATACCGATTCTTGTCGCCACAGTTTACGCAGAGggTTCCCCAGCAGGCAGCAAGCGACATGAGAAGTTCATTCCAATGGTCGCATTTTCATGTGGATACCGCAACCAGTATATGACCGAAGAGGGATCATGGAAGACTGATGATGAACGATATGCCACCTGCTTCTCTGGCAAACTTGACATCCTCAAGTACTGCCGCAAGGCTTATCCATCCATGAACATCACCAACATCGTCGAATACTCGCACGAAGTGAGCATCTCCGACTGGTGCCGCGAGGAAGGATCGCCATGCAAGTGGACTCACAGTGTCAGACCGTACCATTGCATTGACGGAGAATTCCACTCGGAAGCTCTTCAAGTCCCGCACGACTGTCAATTCTCGCACGTCAACTCGCGCGACCAATGCAACGACTACCAGCACTGGAAGGATGAAGCTGGAAAGCAGTGCAAGACCAAGAAGTCCAAGGGCAACAAGGATATGATTGTCAGATCATTTGCCGTTCTTGAGCCATGCGCACTCGACATGTTCACCGGTGTTGAATTCGTCTGCTGTCCAAATGACCAAACGAACAAGACTgatgttcaaaaaactaaagaagacgaagacgacgacgacgatgaGGATGATGCTTATGAGGATGATTACTCAGAAGAGTccgaCGAGAAGGACGAAGAGGAACCAAGTTCCCAAGATCCATACTTCAAGATTGCCAACTGGACCAACGAGCACGACGATTTTAAGAAGGCAGAAATGAGAATGGATGAGAAGCACAGAAAGAAGGTTGACAAGGTGATGAAGGAGTGGGGAGATTTGGAGACGAGATACAACGAGCAAAAGGCCAAGGATCCAAAGGGAGCCGAGAAGTTCAAGTCTCAAATGAACGCCCGCTTCCAGAAGACCGTTTCTTCGCTCGAAGAAGAGCACAAGAGAATGCGAAAGGAGATCGAGGCGGTTCATGAGGAGCGTGTTCAGGCAATGCTTAACGAGAAGAAGAGAGATGCTACACACGATTATCGTCAAGCTCTCGCTACTCACGTCAACAAGCCAAACAAGCACTCTGTTCTCCAATCTCTTAAGGCTTACATCCGTGCAGAGGAGAAGGATCGCATGCACACTTTGAACAGATACCGTCACTTGCTGAAGGCCGATTCAAAGGAAGCTGCCGCATACAAGCCAACCGTTATTCATCGGCTTCGctACATCGATCTTCGCATCAACGGAACTCTTGCGATGCTTCGCGACTTCCCAGATCTTGAGAAATATGTCCGTCCAATTGCAGTCACCTACTGGAAGGACTACAGAGACGAGGTGTCACCAGATATCTCAGTTGAGGACAGTGAACTCACTCCAATCATCCACGATGATGAGTTCAGCAAAAACGCCAAACTTGACGTGAAGGCTCCAACAACCACCGCCAAGCCAGTCAAGGAAACCGACAATGCTAAGGTTCTCCCAACCGAAGCATCTGACTCCGAGGAGGAAGCTGATGAATATTACgaggatgaagatgatgagcAAGTTAAGAAGACACCTGACATGAAGAAGAAGGTCAAGGTTGTTGACATCAAGCCAAAGGAGATCAAGGTCACAATagaagaggagaagaaggCTCCAAAATTGGTGGAAACATCAGTACAAACTGATGATGAGGACGATGATGAGGACTCTTCCTCGTCCACTTCATCCGAAtctgatgaagatgaagacaaaaacatcAAAGAGCTTCGTGTCGACATTGAGCCGATCATCGATGAGCCAGCCTCATTCTACCGCCACGACAAGCTCATCCAATCACCAGAAGTCGAGCGTTCAGCGTCCAGCGTCTTCCAACCATACGTCCTGGCATCGGCGATGTTCATCACCGCTATCTGCATCATCGCCTTTGCCATCACCAACGCTCGTCGTCGCCGTGCCATGCGCGGTTTCATCGAGGTAGACGTCTACACACCAGAGGAGCGTCATGTCGCTGGAATGCAAGTCAATGGCTATGAAAACCCGACGTACTCATTCTTCGACTCGAAGGCCTAA'
    seq_info = SeqInfo(sequence=SEQ, embedded_variants=wb_variants_yn10_yn30_in_C42D8_8a_1_list)
    assert isinstance(seq_info, SeqInfo)
    assert seq_info.embedded_variants == wb_variants_yn10_yn30_in_C42D8_8a_1_list
    assert seq_info.sequence == SEQ


def test_seq_info_initiation_no_sequence(wb_variants_yn10_yn30_in_C42D8_8a_1_list):
    '''
    Test that the SeqInfo class initiates correctly when given no sequence input arg.
    The resulting SeqInfo object should not have a sequence attribute.
    '''
    seq_info = SeqInfo(embedded_variants=wb_variants_yn10_yn30_in_C42D8_8a_1_list)
    assert isinstance(seq_info, SeqInfo)
    assert seq_info.embedded_variants == wb_variants_yn10_yn30_in_C42D8_8a_1_list
    assert not hasattr(seq_info, 'sequence')


def test_seq_info_initiation_no_embedded_variants():
    '''
    Test that the SeqInfo class initiates correctly when given no embedded_variants input arg.
    The resulting SeqInfo object should not have a embedded_variants attribute.
    '''
    SEQ = 'atgACGGTGGGTAAACTAATGATTGGCTTACTTATACCGATTCTTGTCGCCACAGTTTACGCAGAGggTTCCCCAGCAGGCAGCAAGCGACATGAGAAGTTCATTCCAATGGTCGCATTTTCATGTGGATACCGCAACCAGTATATGACCGAAGAGGGATCATGGAAGACTGATGATGAACGATATGCCACCTGCTTCTCTGGCAAACTTGACATCCTCAAGTACTGCCGCAAGGCTTATCCATCCATGAACATCACCAACATCGTCGAATACTCGCACGAAGTGAGCATCTCCGACTGGTGCCGCGAGGAAGGATCGCCATGCAAGTGGACTCACAGTGTCAGACCGTACCATTGCATTGACGGAGAATTCCACTCGGAAGCTCTTCAAGTCCCGCACGACTGTCAATTCTCGCACGTCAACTCGCGCGACCAATGCAACGACTACCAGCACTGGAAGGATGAAGCTGGAAAGCAGTGCAAGACCAAGAAGTCCAAGGGCAACAAGGATATGATTGTCAGATCATTTGCCGTTCTTGAGCCATGCGCACTCGACATGTTCACCGGTGTTGAATTCGTCTGCTGTCCAAATGACCAAACGAACAAGACTgatgttcaaaaaactaaagaagacgaagacgacgacgacgatgaGGATGATGCTTATGAGGATGATTACTCAGAAGAGTccgaCGAGAAGGACGAAGAGGAACCAAGTTCCCAAGATCCATACTTCAAGATTGCCAACTGGACCAACGAGCACGACGATTTTAAGAAGGCAGAAATGAGAATGGATGAGAAGCACAGAAAGAAGGTTGACAAGGTGATGAAGGAGTGGGGAGATTTGGAGACGAGATACAACGAGCAAAAGGCCAAGGATCCAAAGGGAGCCGAGAAGTTCAAGTCTCAAATGAACGCCCGCTTCCAGAAGACCGTTTCTTCGCTCGAAGAAGAGCACAAGAGAATGCGAAAGGAGATCGAGGCGGTTCATGAGGAGCGTGTTCAGGCAATGCTTAACGAGAAGAAGAGAGATGCTACACACGATTATCGTCAAGCTCTCGCTACTCACGTCAACAAGCCAAACAAGCACTCTGTTCTCCAATCTCTTAAGGCTTACATCCGTGCAGAGGAGAAGGATCGCATGCACACTTTGAACAGATACCGTCACTTGCTGAAGGCCGATTCAAAGGAAGCTGCCGCATACAAGCCAACCGTTATTCATCGGCTTCGctACATCGATCTTCGCATCAACGGAACTCTTGCGATGCTTCGCGACTTCCCAGATCTTGAGAAATATGTCCGTCCAATTGCAGTCACCTACTGGAAGGACTACAGAGACGAGGTGTCACCAGATATCTCAGTTGAGGACAGTGAACTCACTCCAATCATCCACGATGATGAGTTCAGCAAAAACGCCAAACTTGACGTGAAGGCTCCAACAACCACCGCCAAGCCAGTCAAGGAAACCGACAATGCTAAGGTTCTCCCAACCGAAGCATCTGACTCCGAGGAGGAAGCTGATGAATATTACgaggatgaagatgatgagcAAGTTAAGAAGACACCTGACATGAAGAAGAAGGTCAAGGTTGTTGACATCAAGCCAAAGGAGATCAAGGTCACAATagaagaggagaagaaggCTCCAAAATTGGTGGAAACATCAGTACAAACTGATGATGAGGACGATGATGAGGACTCTTCCTCGTCCACTTCATCCGAAtctgatgaagatgaagacaaaaacatcAAAGAGCTTCGTGTCGACATTGAGCCGATCATCGATGAGCCAGCCTCATTCTACCGCCACGACAAGCTCATCCAATCACCAGAAGTCGAGCGTTCAGCGTCCAGCGTCTTCCAACCATACGTCCTGGCATCGGCGATGTTCATCACCGCTATCTGCATCATCGCCTTTGCCATCACCAACGCTCGTCGTCGCCGTGCCATGCGCGGTTTCATCGAGGTAGACGTCTACACACCAGAGGAGCGTCATGTCGCTGGAATGCAAGTCAATGGCTATGAAAACCCGACGTACTCATTCTTCGACTCGAAGGCCTAA'
    seq_info = SeqInfo(sequence=SEQ)
    assert isinstance(seq_info, SeqInfo)
    assert seq_info.sequence == SEQ
    assert not hasattr(seq_info, 'embedded_variants')


def test_empty_seq_info_initiation():
    '''
    Test that the SeqInfo class can be initiated with no arguments
    '''
    seq_info = SeqInfo()
    assert isinstance(seq_info, SeqInfo)
    assert not hasattr(seq_info, 'sequence')
    assert not hasattr(seq_info, 'embedded_variants')


def test_seq_info_initiation_from_dict_seq_embedded_variants():
    '''
    Test that the SeqInfo class can be initiated from a dictionary with seqEmbeddedVariants
    '''
    seq_info = SeqInfo.from_dict({
        'sequence': 'ATG',
        'embedded_variants': [
            {
                'variant_id': 'NC_003284.9:g.5114224C>T',
                'genomic_seq_id': 'X',
                'genomic_start_pos': 5114224,
                'genomic_end_pos': 5114224,
                'genomic_ref_seq': 'C',
                'genomic_alt_seq': 'T',
                'seq_substitution_type': 'substitution',
                'rel_start': 2,
                'rel_end': 2
            }
        ]
    })

    assert isinstance(seq_info, SeqInfo)
    assert seq_info.sequence == 'ATG'
    assert len(seq_info.embedded_variants) == 1
    assert isinstance(seq_info.embedded_variants[0], SeqEmbeddedVariant)
    assert seq_info.embedded_variants[0].variant_id == 'NC_003284.9:g.5114224C>T'


def test_seq_info_initiation_from_dict_alignment_embedded_variants():
    '''
    Test that the SeqInfo class can be initiated from a dictionary with AlignmentEmbeddedVariants
    '''
    seq_info = SeqInfo.from_dict({
        'sequence': 'ATG',
        'embedded_variants': [
            {
                'variant_id': 'NC_003284.9:g.5114224C>T',
                'genomic_seq_id': 'X',
                'genomic_start_pos': 5114224,
                'genomic_end_pos': 5114224,
                'genomic_ref_seq': 'C',
                'genomic_alt_seq': 'T',
                'seq_substitution_type': 'substitution',
                'rel_start': 2,
                'rel_end': 2,
                'alignment_start': 2,
                'alignment_end': 2
            }
        ]
    })

    assert isinstance(seq_info, SeqInfo)
    assert seq_info.sequence == 'ATG'
    assert len(seq_info.embedded_variants) == 1
    assert isinstance(seq_info.embedded_variants[0], AlignmentEmbeddedVariant)
    assert seq_info.embedded_variants[0].variant_id == 'NC_003284.9:g.5114224C>T'
